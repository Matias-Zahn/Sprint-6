<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/User/Desktop/Proyectos ZZ/Curso itba/Sprint 6/sprint6.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2787"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="cliente" custom_title="0" dock_id="1" table="4,7:maincliente"/><dock_state state="000000ff00000000fd00000001000000020000077400000387fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000007740000012900ffffff000002690000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="cliente" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="79"/><column index="2" value="101"/><column index="3" value="119"/><column index="4" value="89"/><column index="5" value="87"/><column index="6" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="2da PRO*">--CUARTA PROBLEMATICA



--#1

SELECT sucursal.branch_name, COUNT(cliente.customer_name) AS cantidad_clientes

FROM cliente

INNER JOIN sucursal ON sucursal.branch_id = cliente.branch_id

GROUP BY sucursal.branch_name

ORDER BY cantidad_clientes DESC;


--#2

SELECT s.branch_name, CAST( COUNT(c.customer_name) AS REAL ) / COUNT(e.employee_name)  AS empleados_x_cliente 

FROM cliente c

LEFT JOIN sucursal s ON s.branch_id = c.branch_id

LEFT JOIN empleado e ON e.branch_id = s.branch_id 

GROUP BY s.branch_name

ORDER BY s.branch_name;


--#3

SELECT s.branch_name,  COUNT(t.id) as cantidad_de_tarjetas 

FROM tarjeta t

INNER JOIN cliente c ON t.cliente_id = c.customer_id

INNER JOIN sucursal s ON s.branch_id = c.branch_id

GROUP BY s.branch_name;


--#4

SELECT branch_name, loan_type, avg(loan_total) AS promedio_creditos FROM prestamo

INNER JOIN cliente ON prestamo.customer_id = cliente.customer_id 

INNER JOIN sucursal ON cliente.branch_id = sucursal.branch_id 

GROUP BY branch_name ORDER BY branch_name;


--#5

CREATE TABLE auditoria_cuenta(

	old_id INTEGER, 

	new_id INTEGER, 

	old_balance REAL, 

	new_balance REAL,

	old_iban TEXT, 

	new_iban TEXT, 

	old_type TEXT, 

	new_type TEXT,

	user_action TEXT, 

	created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

--#5.A


CREATE TRIGGER actualizar_auditoria 

AFTER UPDATE ON cuenta

WHEN OLD.balance &lt;&gt; NEW.balance

	OR OLD.iban &lt;&gt; NEW.iban

	OR OLD.tipo_cuenta_id &lt;&gt; NEW.tipo_cuenta_id

BEGIN

	INSERT INTO auditoria_cuenta (

		old_id,

		new_id,

        old_balance,

        new_balance,

        old_iban,

        new_iban,

        old_type,

        new_type,

        user_action,

        created_at

	)

	VALUES (

		OLD.account_id,

        NEW.account_id,

        OLD.balance,

        NEW.balance,

        OLD.iban,

        NEW.iban,

        OLD.tipo_cuenta_id,

        NEW.tipo_cuenta_id,

        'UPDATE',

        DATETIME('now')

	);

END;



--#5.B

UPDATE cuenta 

SET balance = balance - 100

WHERE account_id IN (10,11,12,13,14);


--#6

CREATE INDEX dni_indice ON cliente(customer_DNI);


--#7

CREATE TABLE movimientos (

	id_movimiento INTEGER PRIMARY KEY AUTOINCREMENT,

	numero_cuenta INTEGER,

	monto REAL,

	tipo_operacion TEXT,

	hora DATETIME

);


BEGIN TRANSACTION;

	INSERT INTO movimientos(numero_cuenta,monto, tipo_operacion, hora)

	VALUES( 200, -1000, 'Transferencia', datetime('now'));

	UPDATE cuenta

	SET balance = balance - 1000 WHERE account_id = 200;

	INSERT INTO movimientos(numero_cuenta,monto, tipo_operacion, hora)

	VALUES (400, 1000, 'Deposito', datetime('now'));

	UPDATE cuenta

	SET balance = balance + 1000 WHERE account_id = 400;

COMMIT;























































</sql><current_tab id="0"/></tab_sql></sqlb_project>
