<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/User/Downloads/Sprint.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2870"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="movimientos" custom_title="0" dock_id="1" table="4,11:mainmovimientos"/><dock_state state="000000ff00000000fd00000001000000020000077400000387fc0100000001fc00000000000007740000011e00fffffffa000000000100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011e00fffffffb000000160064006f0063006b00420072006f00770073006500340000000000ffffffff0000000000000000000007740000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="cliente" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="79"/><column index="2" value="101"/><column index="3" value="119"/><column index="4" value="89"/><column index="5" value="87"/><column index="6" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="cuenta" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="70"/><column index="2" value="79"/><column index="3" value="71"/><column index="4" value="255"/><column index="5" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="movimientos" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="93"/><column index="2" value="98"/><column index="3" value="63"/><column index="4" value="111"/><column index="5" value="159"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tarjeta" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="35"/><column index="2" value="159"/><column index="3" value="35"/><column index="4" value="124"/><column index="5" value="105"/><column index="6" value="63"/><column index="7" value="110"/><column index="8" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tipo_cuenta" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="35"/><column index="2" value="79"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="1RA PRO">--PRIMERA PROBLEMATICA

CREATE TABLE tipo_cuenta(
id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
nombre TEXT NOT NULL
);

INSERT INTO tipo_cuenta (account_type_description)
VALUES
  (&quot;Caja de ahorro en Pesos&quot;),
  (&quot;Cuenta corriente en Pesos&quot;);

CREATE TABLE tipo_cliente (
	id integer not null PRIMARY KEY AUTOINCREMENT,
	nombre text not null	
);

INSERT INTO tipo_cliente (customer_type_description)
VALUES
  (&quot;Classic&quot;),
  (&quot;Gold&quot;),
  (&quot;Black&quot;);
  
  
 CREATE TABLE marca_tarjeta(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    nombre TEXT NOT NULL,
);
  

 CREATE TABLE tarjeta(
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	numero TEXT NOT NULL CHECK( length(numero) &lt;=20 ),
	cvv INTEGER NOT NULL,
	fecha_otorgamiento DATE NOT NULL,
	fecha_expiracion DATE NOT NULL,
	tipo TEXT NOT NULL CHECK(card_type='débito' OR card_type='crédito'),
	cliente_id INTEGER NOT NULL,
	marca_tarjeta_id INTEGER NOT NULL,
	FOREIGN KEY (cliente_id) REFERENCES cliente(customer_id),
	FOREIGN KEY (marca_tarjeta_id) REFERENCES marca_tarjeta(id)
);


INSERT INTO tarjeta (numero,cvv,fecha_otorgamiento,card_expire_date,card_cvv,card_type,customer_id)
VALUES  -- EJEMPLOS 
	  (&quot;4485718343564426&quot;,&quot;325&quot;,&quot;01/29/2025&quot;,&quot;12/06/2021&quot;,&quot;Debito&quot;,1,283),
	  (&quot;429342 7365257453&quot;,&quot;634&quot;,&quot;08/21/2025&quot;,&quot;05/08/2024&quot;,&quot;Credito&quot;,1,210),
	  (&quot;4916 994 35 2659&quot;,&quot;249&quot;,&quot;04/10/2024&quot;,&quot;06/24/2022&quot;,&quot;Credito&quot;,2,23),
	  (&quot;543882 7859593433&quot;,&quot;558&quot;,&quot;06/11/2025&quot;,&quot;01/05/2023&quot;,&quot;Credito&quot;,1,166),
	  (&quot;527427 282188 3785&quot;,&quot;277&quot;,&quot;06/07/2025&quot;,&quot;01/02/2022&quot;,&quot;Credito&quot;,2,466);
	  

CREATE TABLE direccion (
id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
calle TEXT NOT NULL,
ciudad TEXT NOT NULL,
codigo_postal TEXT NOT NULL,
tipo_entidad TEXT NOT NULL,
entidad_id TEXT NOT NULL
);

INSERT INTO direccion (calle,calle,ciudad,ciudad,codigo_postal,tipo_entidad, entidad_id)
VALUES --EJEMPLOS
	(&quot;Ap #310-6352 Aliquam Rd.&quot;, &quot;Paulista&quot;, &quot;24686&quot;, &quot;cliente&quot;, 343),
	(&quot;142-1105 Aliquam St.&quot;, &quot;Municipal District&quot;, &quot;6209-5885&quot;, &quot;cliente&quot;, 181);
	  
	  
--EJEMPLOS
UPDATE `cuenta` SET `tipo_cuenta_id` = 1 WHERE `account_id` = 2;
UPDATE `cuenta` SET `tipo_cuenta_id` = 2 WHERE `account_id` = 3;
UPDATE `cuenta` SET `tipo_cuenta_id` = 2 WHERE `account_id` = 4;
UPDATE `cuenta` SET `tipo_cuenta_id` = 2 WHERE `account_id` = 5;
UPDATE `cuenta` SET `tipo_cuenta_id` = 2 WHERE `account_id` = 6;
UPDATE `cuenta` SET `tipo_cuenta_id` = 2 WHERE `account_id` = 7;
UPDATE `cuenta` SET `tipo_cuenta_id` = 1 WHERE `account_id` = 8;





UPDATE empleado
SET employee_hire_date = (substr(employee_hire_date, 7, 4) || '-' || substr(employee_hire_date, 4, 2) || '-' || substr(employee_hire_date, 1, 2)) 
WHERE employee_hire_date &lt;&gt; '';</sql><sql name="2da PRO">/*Pedido Problematica 2*/

--#1
SELECT *
from vista_clientes
WHERE edad &gt; 40
ORDER by DNI ;

--#2
SELECT *
FROM vista_clientes
WHERE Nombre == &quot;Anne&quot; or Nombre == &quot;Tyler&quot;
ORDER by edad  

--#3
INSERT INTO cliente (customer_name, customer_surname, customer_DNI, branch_id, dob)
VALUES
('Lois', 'Stout', 47730534, 80, '1984-07-07'),
('Hall', 'Mcconnell', 52055464, 45, '1968-04-30'),
('Hilel', 'Mclean', 43625213, 77, '1993-03-28'),
('Jin', 'Cooley', 21207908, 96, '1959-08-24'),
('Gabriel', 'Harmon', 57063950, 27, '1976-04-01');

--#4
UPDATE cliente 
SET branch_id = 10
WHERE customer_id &gt; 500 AND customer_id &lt;506

--#5
DELETE from cliente
WHERE customer_name = &quot;Noel&quot; and customer_surname = &quot;David&quot;;

--#6
SELECT 
	loan_type as &quot;Tipo De Prestamo&quot;,
	loan_total as &quot;Total del Pestamo&quot;
FROM prestamo
ORDER by loan_total DESC
LIMIT 1;



</sql><sql name="3ra PRO*">--Tercera Problematica


--#1
SELECT *
FROM cuenta
where balance &lt; 0;

--#2
SELECT nombre, Apellido, edad 
FROM vista_clientes 
WHERE Apellido like(&quot;%Z%&quot;);


--#3
SELECT 
    vc.nombre, 
    vc.apellido, 
    vc.edad,
    s.branch_name as &quot;Nombre de Sucursal&quot;
FROM 
    vista_clientes vc
JOIN 
    sucursal s ON vc.sucursal = s.branch_id
WHERE 
    vc.nombre = 'Brendan'
ORDER BY 
    s.branch_name;	

--#4
SELECT loan_total FROM prestamo WHERE loan_total/100 &gt; 80000 

UNION SELECT loan_type FROM prestamo WHERE loan_type LIKE &quot;prendario&quot;;

--#5
SELECT * FROM prestamo WHERE loan_total &gt; (SELECT avg(loan_total) FROM prestamo);

--#6
SELECT COUNT(nombre) as &quot;Total de menores a 50&quot;
FROM vista_clientes
WHERE EDAD &lt; 50;


--#7
SELECT * FROM cuenta WHERE balance &gt; 8000 LIMIT 5;


--#8
SELECT * FROM prestamo WHERE (strftime('%m', loan_date)) IN (&quot;04&quot;, &quot;06&quot;, &quot;08&quot;)
ORDER BY loan_total;

--#9
SELECT loan_type, sum(loan_total) AS loan_total_accu FROM prestamo 

GROUP BY loan_type;

</sql><sql name="4ta PRO">--CUARTA PROBLEMATICA

--#1
SELECT sucursal.branch_name, COUNT(cliente.customer_name) AS cantidad_clientes
FROM cliente
INNER JOIN sucursal ON sucursal.branch_id = cliente.branch_id
GROUP BY sucursal.branch_name
ORDER BY cantidad_clientes DESC;


--#2
SELECT s.branch_name, CAST( COUNT(c.customer_name) AS REAL ) / COUNT(e.employee_name)  AS empleados_x_cliente 
FROM 
cliente c
LEFT JOIN sucursal s ON s.branch_id = c.branch_id
LEFT JOIN empleado e ON e.branch_id = s.branch_id 
GROUP BY s.branch_name
ORDER BY s.branch_name;


--#3
SELECT s.branch_name,  COUNT(t.id) as cantidad_de_tarjetas 
FROM tarjeta t
INNER JOIN cliente c ON t.cliente_id = c.customer_id
INNER JOIN sucursal s ON s.branch_id = c.branch_id
GROUP BY s.branch_name;



--#4

SELECT branch_name, loan_type, avg(loan_total) AS promedio_creditos FROM prestamo 

INNER JOIN cliente ON prestamo.customer_id = cliente.customer_id 

INNER JOIN sucursal ON cliente.branch_id = sucursal.branch_id 

GROUP BY branch_name ORDER BY branch_name;





--#5

CREATE TABLE auditoria_cuenta(

	old_id INTEGER, 

	new_id INTEGER, 

	old_balance REAL, 

	new_balance REAL,

	old_iban TEXT, 

	new_iban TEXT, 

	old_type TEXT, 

	new_type TEXT,

	user_action TEXT, 

	created_at TEXT DEFAULT CURRENT_TIMESTAMP

);





--#5.A

CREATE TRIGGER actualizar_auditoria 

AFTER UPDATE ON cuenta

WHEN OLD.balance &lt;&gt; NEW.balance

	OR OLD.iban &lt;&gt; NEW.iban

	OR OLD.tipo_cuenta_id &lt;&gt; NEW.tipo_cuenta_id

BEGIN

	INSERT INTO auditoria_cuenta (

		old_id,

        new_id,

        old_balance,

        new_balance,

        old_iban,

        new_iban,

        old_type,

        new_type,

        user_action,

        created_at

	)

	VALUES (

		OLD.account_id,

        NEW.account_id,

        OLD.balance,

        NEW.balance,

        OLD.iban,

        NEW.iban,

        OLD.tipo_cuenta_id,

        NEW.tipo_cuenta_id,

        'UPDATE',

        DATETIME('now')

	);

END;





--#5.B

UPDATE cuenta 

SET balance = balance - 100

WHERE account_id IN (10,11,12,13,14);



--#6

CREATE INDEX dni_indice ON cliente(customer_DNI);



--#7

CREATE TABLE movimientos (

	 id_movimiento INTEGER PRIMARY KEY AUTOINCREMENT,

	 numero_cuenta INTEGER,

	 monto REAL,

	 tipo_operacion TEXT,

	 hora DATETIME

);



BEGIN TRANSACTION;

	INSERT INTO movimientos(numero_cuenta,monto, tipo_operacion, hora)

	VALUES( 200, -1000, 'Transferencia', datetime('now'));

	UPDATE cuenta

	SET balance = balance - 1000 WHERE account_id = 200;

	INSERT INTO movimientos(numero_cuenta,monto, tipo_operacion, hora)

	VALUES (400, 1000, 'Deposito', datetime('now'));

	UPDATE cuenta

	SET balance = balance + 1000 WHERE account_id = 400;

COMMIT;



























</sql><current_tab id="2"/></tab_sql></sqlb_project>
